grammar yarmo2_ru; /* ЯРМО */ 

/* terminals */
/* elementary */

БУКВА_ЛАТ : 'a' .. 'z' | 'A' .. 'Z' ;
БУКВА_КИР : 'а' .. 'я' | 'А' .. 'Я' ;

БУКВА : БУКВА_ЛАТ | БУКВА_КИР ;

ДВОИЧНАЯ_ЦИФРА : '0' | '1' ;

ВОСЬМЕРИЧНАЯ_ЦИФРА : ДВОИЧНАЯ_ЦИФРА 
					| '2' | '3' | '4' | '5' | '6' | '7' ;

ЦИФРА : ВОСЬМЕРИЧНАЯ_ЦИФРА | '8' | '9' ;

ШЕСТНАДЦАТЕРИЧНАЯ_ЦИФРА : ЦИФРА | 'A' | 'B' | 'C' | 'D' | 'E' | 'F' ;

ЛОГИЧЕСКОЕ : 'истина' | 'ложь' ;

ДВОИЧНЫЙ_ПРЕФИКС			: 'д' | 'дл' ;
ВОСМИРИЧНЫЙ_ПРЕФИКС			: 'в' | 'вл' ;
ШЕСТНАДЦАТЕРИЧНЫЙ_ПРЕФИКС	: 'ш' | 'шл' ;
ТЕКСТОВЫЙ_ПРЕФИКС			: 'т' | 'тл' ;

КНАЧАЛО : '|>';
ККОНЕЦ	: '<|';

ПЛЮС		: '+' ;
МИНУС		: '-' ;
СЛОЖИТЬ		: ПЛЮС | 'сл' | 'доб' | 'сложить';
ВЫЧЕСТЬ		: МИНУС | 'вч' | 'выч' | 'вычесть';

ЗВЕЗДА		: '*' ;
НЧЕРТА		: '/' ;
ДЕЛИТЬРАЦ	:'делр' ;
ДЕЛИТЬ		: НЧЕРТА | 'дел' | 'делить' | ДЕЛИТЬРАЦ;
УМНОЖИТЬ	: ЗВЕЗДА | 'умн' | 'умножить';

МЕНЬШЕ		: '<' | 'м';
МЕНЬШЕРАВ	: '≤' | 'мр';
БОЛЬШЕ		: '>' | 'б';
БОЛЬШЕРАВ	: '≥' | 'бр';
РАВНО		: '=' ;
НЕРАВНО		: '≠' ;

ОТНОШЕНИЯ 	: МЕНЬШЕ | МЕНЬШЕРАВ
			| БОЛЬШЕ | БОЛЬШЕРАВ
			| РАВНО | НЕРАВНО;

КОНЮНКЦИЯ : '∧' | 'И';
ДИЗЮНКЦИЯ : '∨' | 'ИЛИ';
ОТРИЦАНИЕ : '~' | 'НЕ';
СЛОЖМОД2 : '⊕' | 'ИСК';

А_ОПЕРАТОРЫ	: СЛОЖИТЬ | ВЫЧЕСТЬ | КОНЮНКЦИЯ | СЛОЖМОД2;
М_ОПЕРАТОРЫ	: УМНОЖИТЬ | ДЕЛИТЬ | ДИЗЮНКЦИЯ ;

ТОЧКА		: '.' ;
ЗАПЯТАЯ		: ',' ;
ДВОЕТОЧИЕ	: ':' ;
ТОЧЗАП		: ';' ;
ПРОПУСК		: '_' ;
ЭКСПОНЕНТА	: 'E' ;
ДКАВЫЧКА	: '"' ;
АМПЕРСАНД	: '@' ;
ДИАП		: '..' ;
КРЫША		: '^' ;

СКОБКА_Л	: '(' ;
СКОБКА_П	: '(' ;

КСКОБКА_Л	: '[' ;
КСКОБКА_П	: ']' ;

ФСКОБКА_Л	: '{' ;
ФСКОБКА_П	: '}' ;

СТРЕЛКА		: '->' ;

НАЧАЛО	: 'начало' ;
ВХОД	: 'вход' ;
КОНЕЦ	: 'конец' ;
ЗАПИСИ	: 'записи' ;
ЕСЛИ	: 'если' ;
ТО		: 'то' ;
ИНАЧЕ	: 'иначе' ;
ВСЕ		: 'все' ;
ВЫБОР	: 'выбор' ;
ИЗ		: 'из' ;
ПРИ		: 'при' ;
ПО		: 'по' ;
РАЗ		: 'раз' ;
ПЕРЕБОР	: 'перебор' ;
ПОКА	: 'пока' ;
ЦИКЛ	: 'цикл' ;
КОГДА	: 'когда' ;
ВОЗВРАТ	: 'возврат' ;
АДРЕС	: 'адрес' ;
ТЕЛО	: 'тело' ;
ПОВТОРЯТЬ	: 'повторять' ;
ЗАВЕРШИТЬ	: 'завершить' ;
ПАРАМЕТР	: 'параметр' ;
ФУНКЦИЯ		: 'функция' ;
ПРОЦЕДУРА	: 'процедура' ;
РЕЗУЛЬТАТ	: 'результат' ;
ЧИСЛО		: 'число' ;
ЦЕЛОЕ		: 'целое' ;
РАЦИОНАЛЬНОЕ	: 'рациональное' ;
СЛ_БУКВА	: 'буква' ;
ВЫХОД		: 'выход' ;
КОНСТАНТЫ		: 'константы' ;
КОНСТ		: 'конст' ;
ПЕРЕМЕННЫЕ		: 'переменные' ;
ПЕРЕМ		: 'перем' ;
ПРОЦЕДУРЫ		: 'процедуры' ;
ПОДПРОГ		: 'подпрог' ;

ССЫЛКА		: 'ссылка' ;
РАЗМЕР		: 'размер' ;
МАССИВ		: 'массив' ;
ЗАПИСЬ		: 'запись' ;
ВЫРОВНЯТЬ		: 'выровнять' ;
ИСПОЛЬЗОВАТЬ	: 'использовать' ;
ВИРТУАЛЬНОЕ		: 'виртуальное' ;

/* composite */

имя : БУКВА ( БУКВА | ЦИФРА | ПРОПУСК )* ;

сложное_имя : имя (ТОЧКА имя)* ;

число : целое | рациональное ;

целое : положительное | отрицательное ;

положительное : ЦИФРА (ЦИФРА)* ;

отрицательное : МИНУС положительное ;

рациональное : целое ТОЧКА положительное (ЭКСПОНЕНТА целое)? ;

шестнадцатеричный : ШЕСТНАДЦАТЕРИЧНЫЙ_ПРЕФИКС 
					ШЕСТНАДЦАТЕРИЧНАЯ_ЦИФРА (ШЕСТНАДЦАТЕРИЧНАЯ_ЦИФРА)* ;

восьмеричный : ВОСМИРИЧНЫЙ_ПРЕФИКС 
					ВОСЬМЕРИЧНАЯ_ЦИФРА (ВОСЬМЕРИЧНАЯ_ЦИФРА)* ;

двоичный : ДВОИЧНЫЙ_ПРЕФИКС ДВОИЧНАЯ_ЦИФРА (ДВОИЧНАЯ_ЦИФРА)* ;

строка : ДКАВЫЧКА (БУКВА)* ДКАВЫЧКА ;

текстовый : ТЕКСТОВЫЙ_ПРЕФИКС строка ;

набор : шестнадцатеричный | восьмеричный | двоичный | текстовый ;

команда : КНАЧАЛО (ВОСЬМЕРИЧНАЯ_ЦИФРА)+ ККОНЕЦ ;

слог : граница ДВОЕТОЧИЕ граница ;

граница
	: формула_константа ;

формула
   : простая_формула (ОТНОШЕНИЯ формула)?
   ;

простая_формула
   : терм (А_ОПЕРАТОРЫ простая_формула)?
   ;

фактор_знак
   : (ПЛЮС | МИНУС)? фактор
   ;
   
терм
   : фактор_знак (М_ОПЕРАТОРЫ терм)?
   ;
 
фактор
   :	переменная
   |	вызов_подпрограммы
   |	константа
   |	ОТРИЦАНИЕ фактор   
   | 	СКОБКА_Л формула СКОБКА_П
   | 	СКОБКА_Л ЕСЛИ формула ТО формула ИНАЧЕ формула СКОБКА_П
   | 	СКОБКА_Л ПЕРЕБОР формула ИЗ 
			формула ТО формула ТОЧКА
			(формула ТО формула ТОЧКА)+
			ИНАЧЕ формула
		СКОБКА_П
   ;

простой_тип
	: простой_числовой_тип | символьный_тип | логический_тип
	;
	
простой_числовой_тип
	: ЧИСЛО | ЦЕЛОЕ | РАЦИОНАЛЬНОЕ
	;

символьный_тип
	: СЛ_БУКВА
	;
	
логический_тип
	: ЛОГИЧЕСКОЕ
	;

вызов_подпрограммы
	: имя (СКОБКА_Л список_аргументов СКОБКА_П)?
	;

список_аргументов
	: аргумент (ЗАПЯТАЯ аргумент)*
	;

аргумент
	: формула
	;

переменная
	: имя ;

список_имен
   : имя (ЗАПЯТАЯ имя)*
   ;
   
константа 
	: строка | формула_константа ;

формула_константа
	: простая_формула_конст (ОТНОШЕНИЯ формула_константа)? ;

простая_формула_конст
   : терм_коснтанта (А_ОПЕРАТОРЫ простая_формула_конст)?
   ;

фактор_знак_конст
   : (ПЛЮС | МИНУС)? фактор_константа
   ;
   
терм_коснтанта
   : фактор_знак_конст (М_ОПЕРАТОРЫ терм_коснтанта)?
   ;
 
фактор_константа
   : ЛОГИЧЕСКОЕ
   | число
   | набор
   | ОТРИЦАНИЕ фактор_константа
   | СКОБКА_Л формула_константа СКОБКА_П
   | ЕСЛИ формула_константа ТО формула_константа ИНАЧЕ формула_константа
   | ПЕРЕБОР формула_константа ИЗ 
			формула_константа ТО формула_константа ТОЧКА
			(формула_константа ТО формула_константа ТОЧКА)*
			ИНАЧЕ формула_константа
   ;

метка
	: имя ДВОЕТОЧИЕ
	;
	
предложение
   : метка ДВОЕТОЧИЕ базовое_предложение
   | базовое_предложение
   ;

список_предложений
	: предложение (ТОЧЗАП предложение)*
	;
	
абзац
	: список_предложений ТОЧКА
	;
	
фразы
	: базовое_предложение (ЗАПЯТАЯ базовое_предложение)*
	;
	
базовое_предложение
   : простое_предложение
   | завершающее
   | управление_предложение
   ;

простое_предложение
   : засылка
   | вызов_подпрограммы
   | пустое_предложение
   ;

завершающее
	: ЗАВЕРШИТЬ метка (ПРИ формула ВСЕ)? 
	| ВОЗВРАТ (ПРИ формула ВСЕ)?
	;
	
засылка
	: формула СТРЕЛКА переменная
	;

пустое_предложение
	:
	;

управление_предложение 
	: альтернативное 
	| циклическое
	;

альтернативное 
	: условное 
	| выбирающее 
	| перебирающее
	;	
	

условное 
	: ЕСЛИ формула ТО абзац (ИНАЧЕ абзац)? ВСЕ ;

выбирающее
	:	ВЫБОР формула ИЗ фразы 
			(ИНАЧЕ базовое_предложение)? 
		ВСЕ
	;

перебирающее
	:	ПЕРЕБОР формула ИЗ 
			константа ТО список_предложений ТОЧКА
			(константа ТО список_предложений ТОЧКА)*
			(ИНАЧЕ базовое_предложение)? 
		ВСЕ
	;

циклическое
	:	ПОКА формула ЦИКЛ абзац
	|	ПОКА формула ЦИКЛ список_предложений 
			(ИНАЧЕ список_предложений)?
		ВСЕ
	|	ПОВТОРЯТЬ список_предложений 
			(КОГДА формула (ИНАЧЕ список_предложений)?)? ВСЕ
	|	ПО константа РАЗ формула ЦИКЛ список_предложений ВСЕ
	;
	
простой_блок
	: 	НАЧАЛО 
			заголовок_блока
			тело_блока			
		КОНЕЦ
	;
	
заголовок_блока	
	: описание_сущностей_блока*
	;
	
тело_блока
	: ВХОД список_предложений (ВЫХОД простое_предложение)?
	;

блок
	: простой_блок
	| АМПЕРСАНД метка ДВОЕТОЧИЕ простой_блок
	;

описание_прораммы
	: (описание_модулей)? описание_сущностей
	;

описание_сущностей
	: 	описание_констант 
		| описание_типов 
		| объявление_процедур 
		| объявление_виртуалов
	;


описание_сущностей_блока
	: 	описание_констант 
		| описание_типов 
		| описание_локальных_процедур 
		| описание_процедур
		| описание_виртуалов
	;

описание_модулей
   : ИСПОЛЬЗОВАТЬ список_имен 
   ;

описание_констант
	: (КОНСТАНТЫ | КОНСТ) (описание_одной_константы ТОЧЗАП)+
	;

описание_переменных
	: (ПЕРЕМЕННЫЕ | ПЕРЕМ) (описание_одной_константы ТОЧЗАП)+ 
	;

описание_процедур
	: (ПРОЦЕДУРЫ | ПОДПРОГ) объявление_процедур 
	;

объявление_процедур
	: (объявление_одной_процедуры ТОЧКА)+ 
	;	
	
описание_локальных_процедур
	: (описание_одной_процедуры ТОЧЗАП)+ 
	;

описание_типов
	: (описание_одного_типа ТОЧЗАП)+ 
	;
		
описание_одной_константы
	: имя РАВНО константа
	;
	
описание_одной_переменной
	: имя ДВОЕТОЧИЕ тип 
	| имя ДВОЕТОЧИЕ тип РАВНО константа
	;

список_формальных_аргументов
   : формальный_аргумент (ЗАПЯТАЯ формальный_аргумент)*
   ;

список_формальных_аргументов_функ
   : формальный_аргумент_функ (ЗАПЯТАЯ формальный_аргумент_функ)*
   ;

формальный_аргумент_функ
   : имя ДВОЕТОЧИЕ тип
   | имя ДВОЕТОЧИЕ тип РАВНО константа
   ;

формальный_аргумент
   : формальный_аргумент_функ
   | ВЫХОД имя ДВОЕТОЧИЕ тип  
   | ССЫЛКА имя ДВОЕТОЧИЕ тип
   ;
      
объявление_одной_процедуры
	:	ПРОЦЕДУРА имя 
				(СКОБКА_Л список_формальных_аргументов СКОБКА_П)? 
	|	ПРОЦЕДУРА имя 
				СКОБКА_Л список_формальных_аргументов СКОБКА_П 
				РЕЗУЛЬТАТ тип
	|	ФУНКЦИЯ имя 
				СКОБКА_Л список_формальных_аргументов_функ СКОБКА_П 
				РЕЗУЛЬТАТ тип	
	;
/*
Отличие процедур от функций - последние не могут иметь состояния и
могут использоваться для рекурсии.
- В функцию все параметры передаются только для чтения (по значению?)
- функции имеют только локальный контекст - лексически переменные
  верхнего уровня в них не видны, а значит можно использовать 
  только аргументы и локальные переменные.
  !! Тогда их безопасно развертывать в линейный код (inlining)
  !! И можно использовать одновремено и для вычисления констант 
     и как код 
*/

описание_одного_типа
	: имя РАВНО объявление_типа
	;

группа_последовательных_полей_записи
	:	СКОБКА_Л 
			описание_одного_поля (ТОЧЗАП описание_одного_поля)* 
		СКОБКА_П
	;

группа_параллельных_полей_записи
	:	КСКОБКА_Л 
		описание_одного_поля (ТОЧЗАП описание_одного_поля)+ 
		КСКОБКА_П
	;

описание_полей_записи
	: группа_последовательных_полей_записи 
	| группа_параллельных_полей_записи
	;

описание_одного_поля
	: имя ДВОЕТОЧИЕ объявление_типа
	;

объявление_элемента_памяти
	: простой_тип РАЗМЕР формула_константа
	;	
/* РАЗМЕР в битах */
	
объявление_типа
	: 	(  объявление_элемента_памяти
		| МАССИВ формула_константа ИЗ объявление_типа
		| ЗАПИСЬ описание_полей_записи
		) (ВЫРОВНЯТЬ формула_константа)?
	;
	
тип	: имя ;

описание_одной_процедуры
	:	объявление_одной_процедуры ДВОЕТОЧИЕ блок
	;

объявление_виртуалов
	: ВИРТУАЛЬНОЕ
	;

описание_виртуалов
	: ВИРТУАЛЬНОЕ описание_сущностей_блока
	;
		
программа
	: описание_прораммы простой_блок ТОЧКА
	;
